{"version":3,"sources":["services/apiService.js","components/weatherCard/WeatherCard.js","customHooks/inputHooks.js","components/searchInput/SearchInput.js","services/weatherService.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","module","exports","get","url","getWithQueryParams","queryParams","concat","params","WeatherCard","_ref","weatherData","weekSummary","react_default","a","createElement","className","days","Fragment","style","fontFamily","data","instant","details","dew_point_temperature","relative_humidity","fog_area_fraction","cloud_area_fraction_low","cloud_area_fraction_medium","cloud_area_fraction_high","fontSize","name","air_temperature","height","src","next_1_hours","summary","symbol_code","alt","opacity","timeseries","map","d","i","key","dayInWeek","useField","type","_useState","useState","_useState2","Object","slicedToArray","value","setValue","onChange","event","target","reset","changeValue","newVal","SearchInput","setSearchLocation","latitudeInput","longitudeInput","cityInput","dataQueryTypeSelect","useEffect","htmlFor","Number","onClick","lat","lon","alert","length","address","weatherService","date","apiService","objectSpread","App","originLocation","setOriginLocation","_useState3","_useState4","destinationLocation","setDestinationLocation","_useState5","_useState6","originWeatherData","setOriginWeatherData","_useState7","_useState8","destinationWeatherData","setDestinationWeatherData","Date","then","res","catch","err","weatherCard_WeatherCard","searchInput_SearchInput","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.d7c2a1a4.chunk.js","sourcesContent":["const axios = require('axios');\r\n\r\n\r\nconst get = (url) => {\r\n    return axios.get(url);\r\n}\r\n\r\nconst getWithQueryParams = (url, queryParams) => {\r\n    return axios.get(`${url}/`, { params: queryParams });\r\n};\r\n\r\nmodule.exports = {\r\n    get,\r\n    getWithQueryParams\r\n}","import React, { useEffect } from 'react';\r\nimport './style.css';\r\n\r\nconst WeatherCard = ({ weatherData, weekSummary }) => {\r\n\r\n    if (!weatherData) {\r\n        return (\r\n            <div className='text-center '>\r\n                Weather data is not loaded\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n    return (\r\n        <>\r\n            <div className=\"card weather-card\" style={{ fontFamily: 'cursive' }}>\r\n                <div className='card-header'>\r\n                    <div className='d-flex justify-content-between'>\r\n                        <span>Dew Point: {weatherData.data.instant.details.dew_point_temperature}&#176;</span>\r\n                        <span>Humidity: {weatherData.data.instant.details.relative_humidity}%</span>\r\n                        {/* <span>Temperature: {weatherData.data.instant.details.air_temperature}</span> */}\r\n                    </div>\r\n                </div>\r\n                <div className=\"card-body\" >\r\n                    <div className='row'>\r\n                        <div className='col-3 fog'>\r\n                            <div>\r\n                                {weatherData.data.instant.details.fog_area_fraction}%\r\n                        </div>\r\n                            <div>\r\n                                Fog\r\n                        </div>\r\n\r\n                        </div>\r\n                        <div className='col-3   low'>\r\n                            <div>{weatherData.data.instant.details.cloud_area_fraction_low}%</div>\r\n                            <div className=''>Low Clouds</div>\r\n\r\n                        </div>\r\n                        <div className='col-3  medium'>\r\n                            <div>{weatherData.data.instant.details.cloud_area_fraction_medium}%</div>\r\n                            <div>Medium Clouds</div>\r\n                        </div>\r\n                        <div className='col-3  high'>\r\n                            <div>{weatherData.data.instant.details.cloud_area_fraction_high}%</div>\r\n                            <div className=''>High Clouds</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='row'>\r\n                        <div className='ml-4 d-flex flex-column'>\r\n                            <span style={{ fontSize: '40px' }}>{weatherData.name}</span>\r\n                            <span style={{ fontSize: '30px' }}>{weatherData.data.instant.details.air_temperature}&#176;</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className='row mt-2' style={{ height: '200px' }}>\r\n                        <div className='col-3 align-self-center sun-col fog'>\r\n                            <img src={`/image/${weatherData.data.next_1_hours.summary.symbol_code}.png`}\r\n                                className='img-fluid weather-indicator ' alt='sun'\r\n                            />\r\n\r\n                        </div>\r\n                        <div className='col-3 align-self-end low-cloud-col'>\r\n                            <div className='img-container'>\r\n                                <img src='/image/cloudy.png'\r\n                                    className='img-fluid low-cloud-img'\r\n                                    style={{ opacity: weatherData.data.instant.details.cloud_area_fraction_low / 100 }}\r\n                                    alt='low-clouds' />\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div className='col-3 align-self-center  medium-cloud-col'>\r\n                            <div className='img-container'>\r\n                                <img src='/image/cloudy.png'\r\n                                    className='img-fluid medium-cloud-img'\r\n                                    style={{ opacity: weatherData.data.instant.details.cloud_area_fraction_medium / 100 }}\r\n                                    alt='medium-clouds' />\r\n                            </div>\r\n                        </div>\r\n                        <div className='col-3 align-self-start  high-cloud-col'>\r\n                            <div className='img-container'>\r\n                                <img src='/image/cloudy.png'\r\n                                    className='img-fluid high-cloud-img'\r\n                                    style={{ opacity: weatherData.data.instant.details.cloud_area_fraction_high / 100 }}\r\n                                    alt='low-clouds' />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"card-body\" >\r\n                    <div className='d-flex week-forecast'>\r\n                        {weatherData.weekSummary.timeseries.map((d, i) => {\r\n                            if (i > 6) return null;\r\n                            return <div key={d.dayInWeek} className='week-forecast-item' style={{ fontSize: '15px' }}>\r\n                                <span>{days[d.dayInWeek]}</span>\r\n                                <img src={`/image/${d.symbol_code}.png`}\r\n                                    className='img-fluid'\r\n                                    alt='weather-indicator'\r\n                                />\r\n                                <span>{d.details.air_temperature}&#176;</span>\r\n                            </div>\r\n                        }\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n                <small className=\"text-muted\">Week forecast is taken at random time of each day</small>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default WeatherCard;","import { useState } from 'react';\r\n\r\nexport const useField = (type) => {\r\n\r\n    const [value, setValue] = useState('');\r\n\r\n    const onChange = (event) => {\r\n        setValue(event.target.value);\r\n    };\r\n\r\n    const reset = () => setValue('');\r\n\r\n    const changeValue = (newVal) => {\r\n        setValue(newVal);\r\n    };\r\n\r\n    return {\r\n        value,\r\n        onChange,\r\n        reset,\r\n        type,\r\n        changeValue\r\n    };\r\n};","import React, { useEffect } from 'react';\r\nimport { useField } from '../../customHooks/inputHooks';\r\n\r\n\r\nconst SearchInput = ({ setSearchLocation }) => {\r\n    const latitudeInput = useField('number');\r\n    const longitudeInput = useField('number');\r\n    const cityInput = useField('text');\r\n    const dataQueryTypeSelect = useField('select');\r\n\r\n    const handleSubmit = () => {\r\n        if (Number(dataQueryTypeSelect.value) === 0) {\r\n            if (!latitudeInput.value || !longitudeInput.value) {\r\n                alert(\"lat and lon can not be empty\")\r\n                return;\r\n            }\r\n            return setSearchLocation({\r\n                lat: latitudeInput.value,\r\n                lon: longitudeInput.value\r\n            })\r\n        }\r\n        if (!cityInput.value.length) {\r\n            alert(\"Adress can not be empty\")\r\n            return;\r\n        }\r\n        return setSearchLocation({\r\n            address: cityInput.value\r\n        })\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (dataQueryTypeSelect.value == 0) {\r\n            cityInput.changeValue('')\r\n        }\r\n        if (dataQueryTypeSelect.value == 1) {\r\n            latitudeInput.changeValue(0);\r\n            longitudeInput.changeValue(0);\r\n        }\r\n    }, [dataQueryTypeSelect.value])\r\n\r\n    useEffect(() => {\r\n        latitudeInput.changeValue(44.77218);\r\n        longitudeInput.changeValue(17.191000);\r\n        dataQueryTypeSelect.changeValue(0);\r\n    }, []);\r\n\r\n    const resetFields = () => {\r\n        latitudeInput.changeValue('');\r\n        longitudeInput.changeValue('');\r\n        cityInput.changeValue('')\r\n    }\r\n    return (\r\n        <>\r\n\r\n            <div className=\"form-group  mt-2\">\r\n                <label htmlFor=\"exampleFormControlSelect1\">Get Weather By</label>\r\n                <select className=\"form-control\" onChange={dataQueryTypeSelect.onChange} value={dataQueryTypeSelect.value}>\r\n                    <option value={0}>Coordinates</option>\r\n                    <option value={1}>City</option>\r\n\r\n                </select>\r\n            </div>\r\n            {Number(dataQueryTypeSelect.value) === 0 ?\r\n                <> <div className=\"form-group \">\r\n                    <label>Latitude</label>\r\n                    <input type={latitudeInput.type} onChange={latitudeInput.onChange} value={latitudeInput.value} className=\"form-control\" reset='' />\r\n                    <label>Longitude</label>\r\n                    <input type={longitudeInput.type} onChange={longitudeInput.onChange} value={longitudeInput.value} className=\"form-control\" />\r\n                </div>\r\n                </>\r\n                :\r\n                <>\r\n                    <div className=\"form-group \">\r\n                        <label>City</label>\r\n                        <input type={cityInput.type} onChange={cityInput.onChange} value={cityInput.value} className=\"form-control\" />\r\n                    </div>\r\n                </>}\r\n            <button onClick={handleSubmit} type=\"submit\" className=\"btn btn-primary mb-2\">Get Weather Data</button>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SearchInput;","import apiService from './apiService';\r\nconst apiUrl = 'api/weather';\r\n\r\nconst getWeatherData = (date, { params }) => {\r\n    return apiService.getWithQueryParams(apiUrl, { date, ...params });\r\n}\r\n\r\nexport default {\r\n    getWeatherData\r\n}","import React, { useState, useEffect } from 'react';\nimport WeatherCard from './components/weatherCard/WeatherCard';\nimport SearchInput from './components/searchInput/SearchInput';\nimport weatherService from './services/weatherService';\n\nconst App = () => {\n\n  const [originLocation, setOriginLocation] = useState(null);\n  const [destinationLocation, setDestinationLocation] = useState(null);\n\n  const [originWeatherData, setOriginWeatherData] = useState(null);\n  const [destinationWeatherData, setDestinationWeatherData] = useState(null);\n\n  useEffect(() => {\n    if (originLocation) {\n      weatherService\n        .getWeatherData(new Date(), { params: { ...originLocation } })\n        .then(res => setOriginWeatherData(res.data))\n        .catch(err => alert(\"Error happened\"));\n    }\n  }, [originLocation]);\n\n  useEffect(() => {\n    if (destinationLocation) {\n      weatherService\n        .getWeatherData(new Date(), { params: { ...destinationLocation } })\n        .then(res => setDestinationWeatherData(res.data))\n        .catch(err => alert(\"Error happened\"));\n      ;\n    }\n  }, [destinationLocation]);\n\n  return (\n    <div className='container'>\n      <div className='row mt-4 '>\n        <div className='col-md-6'>\n          <WeatherCard weatherData={originWeatherData} />\n          <SearchInput setSearchLocation={setOriginLocation} />\n        </div>\n        <div className='col-md-6 '>\n          <WeatherCard weatherData={destinationWeatherData} />\n          <SearchInput setSearchLocation={setDestinationLocation} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}